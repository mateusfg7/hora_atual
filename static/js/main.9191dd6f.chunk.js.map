{"version":3,"sources":["components/main-section/index.js","page/main/hours-detect/index.js","page/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Section","probs","checkTime","i","startTime","today","Date","h","getHours","m","getMinutes","s","getSeconds","temp","setInterval","change","state","time","this","setState","className","Component","hours","Hora","Main","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAIqBA,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,UAAY,SAACC,GAIT,OAHIA,EAAE,KACFA,EAAE,IAAMA,GAELA,GAdQ,EAgBnBC,UAAY,WACT,IAAMC,EAAQ,IAAIC,KACZC,EAAIF,EAAMG,WACZC,EAAEJ,EAAMK,aACRC,EAAEN,EAAMO,aAKZ,OADgBL,EAAE,KAFlBE,EAAI,EAAKP,UAAUO,IAEK,KADxBE,EAAI,EAAKT,UAAUS,KAvBH,EA6BpBE,KAAO,kBAAMC,aAAY,kBAAM,EAAKC,WAAU,MA3BzC,EAAKC,MAAQ,CAAEC,KAAM,EAAKb,aAFX,E,sEAMfc,KAAKC,SAAS,CAAEF,KAAMC,KAAKd,gB,+BA0B3B,OACI,yBAAKgB,UAAU,gBACX,2BAAIF,KAAKF,MAAMC,MACf,yBAAKG,UAAU,MAAMF,KAAKL,a,GArCLQ,cCH/BC,GADO,IAAIhB,MACEE,WAkBJe,EAhBF,WACT,OAAID,GAAS,GAAKA,EAAQ,GACf,UACAA,GAAS,IAAMA,EAAQ,GACvB,QACAA,GAAS,IAAMA,GAAS,GACxB,UACAA,EAAQ,IAAMA,GAAS,GACvB,SACAA,EAAQ,IAAMA,GAAS,EACvB,QACAA,EAAQ,GAAKA,EAAQ,EACrB,YADJ,GCWIE,G,YAhBF,kBACT,yBAAKC,GAAG,OAAOL,UAAWG,KACtB,yBAAKH,UAAU,QACX,yCACA,uBAAGA,UAAU,QACT,kBAAC,EAAD,OACA,6BACJ,gCACI,uDCJDM,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9191dd6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './styles.css';\n\nexport default class Section extends Component {\n\n    constructor(probs) {\n        super(probs);\n        this.state = { time: this.startTime() }\n    }\n\n    change() {\n        this.setState({ time: this.startTime() });\n    }\n    \n\n    checkTime = (i) => {\n        if (i<10) {\n            i=\"0\" + i;\n        }\n        return i;\n    }\n    startTime = () => {\n       const today = new Date();\n       const h = today.getHours();\n       let m=today.getMinutes();\n       let s=today.getSeconds(); \n       // add a zero in front of numbers<10\n       m = this.checkTime(m);\n       s = this.checkTime(s);\n       const retorno = h+':'+m+':'+s;\n       return retorno;\n    }\n\n\n   temp = () => setInterval(() => this.change(), 1000)\n\n    render() {\n        return (\n            <div className=\"main_section\">\n                <p>{this.state.time}</p>\n                <div className=\"id\">{this.temp()}</div>\n            </div>\n        )\n    }\n}","const data = new Date();\nconst hours = data.getHours();\n\nconst Hora = () => {\n    if (hours >= 6 && hours < 11) {\n        return 'morning'\n    } else if (hours >= 11 && hours < 13) {\n        return 'lunch';\n    } else if (hours >= 13 && hours <= 16) {\n        return 'evening';\n    } else if (hours > 16 && hours <= 18) {\n        return 'sunset';\n    } else if (hours > 18 || hours <= 3) {\n        return 'night';\n    } else if (hours > 3 && hours < 6 ) {\n        return 'dawn';\n    }\n};\n\nexport default Hora;","import React from 'react';\nimport Section from '../../components/main-section';\nimport Hora from './hours-detect';\n\nimport './css/classes.css';\nimport  './css/style.css';\n\n\n\nconst Main = () => (\n    <div id='body' className={Hora()}>\n        <div className='area'>\n            <p>Hora atual</p>\n            <p className='hour'>\n                <Section />\n            </p><br/>\n            <footer>\n                <h2>&copy; Mateus Felipe</h2>\n            </footer>\n        </div>\n        \n    </div>\n);\n\n\nexport default Main;","import React from 'react';\nimport './reset.css';\n\nimport Main from './page/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}